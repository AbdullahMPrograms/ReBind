;< ---------------- Preflight Check ---------------- >
PreFlightCheck:
{
    IniRead, toggleLoopMicVolumeValue, %A_ScriptDir%\config.ini, Settings, ToggleLoopMicVolume
    IniRead, toggleFKeyRebindValue, %A_ScriptDir%\config.ini, Settings, ToggleFKeyRebind

    if (toggleLoopMicVolumeValue = 1) {
        SetTimer LoopMicVolume, -1
    }

    if (toggleFKeyRebindValue = 1) {
        SetTimer FKeyRebind, -1
    }
    return
}
;< ---------------- Scripts ---------------- >
LoopMicVolume:
{
	If (toggleLoopMicVolume := !toggleLoopMicVolume) ; Toggle a variable between true and false
	{
		Menu, Tray, Check, Set Microphone Volume
		running := true ; Set a variable to indicate that the loop is running
		;Msgbox "Toggled On"
		IniWrite, %toggleLoopMicVolume%, %A_ScriptDir%\config.ini, Settings, ToggleLoopMicVolume
		Loop ; Start a loop without a label name
		{
			If (!running) ; Check if the variable is false
				Break ; Break out of the loop if it is
			SoundSet, 70, MASTER, VOLUME, 7 ; Set the volume to 70%, 8 corresponds to AT2020 Mic
			Sleep, 600000   ;10 minute delay
		}	
	} 
	else 
	{
		Menu, Tray, UnCheck, Set Microphone Volume
		running := false ; Set the variable to false to stop the loop
		IniWrite, %toggleLoopMicVolume%, %A_ScriptDir%\config.ini, Settings, ToggleLoopMicVolume
	}
	return
}

FKeyRebind:
{
	If (toggleFKeyRebind := !toggleFKeyRebind) ; Toggle a variable between true and false
	{
		Menu, Tray, Check, F-Key Rebind
		IniWrite, %toggleFKeyRebind%, %A_ScriptDir%\config.ini, Settings, ToggleFKeyRebind
		RemapToggle := true
	} 
	else 
	{
		Menu, Tray, UnCheck, F-Key Rebind
		IniWrite, %toggleFKeyRebind%, %A_ScriptDir%\config.ini, Settings, ToggleFKeyRebind
		RemapToggle := false
	}
	return
}

#IF RemapToggle
{
		CapsLock & 1:: F1
		CapsLock & 2:: F2
		CapsLock & 3:: F3
		CapsLock & 4:: F4 
		CapsLock & 5:: F5
		CapsLock & 6:: F6
		CapsLock & 7:: F7
		CapsLock & 8:: F8
		CapsLock & 9:: F9
		CapsLock & 0:: F10
		CapsLock & -:: F11
		CapsLock & =:: F12
		CapsLock & Esc:: `
}
; Initialize the GUI
openPrograms := GetOpenPrograms()  ; Get the list of open programs
if (openPrograms.Length() > 0) {  ; Only show the GUI if at least one program is open
    UpdateGUI(openPrograms[1])  ; Show the initial GUI with the first open program
}
